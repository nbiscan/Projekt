/* Generated By:JavaCC: Do not edit this line. PigletParserTokenManager.java */
package org.apache.calcite.piglet.parser;
import org.apache.calcite.avatica.util.Casing;
import org.apache.calcite.sql.parser.SqlParserPos;
import org.apache.calcite.sql.parser.SqlParseException;
import org.apache.calcite.sql.parser.SqlParserUtil;
import org.apache.calcite.runtime.CalciteContextException;
import org.apache.calcite.piglet.Ast.*;
import org.apache.calcite.util.trace.CalciteTrace;
import org.apache.calcite.util.Pair;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import org.slf4j.Logger;
import java.util.List;
import static org.apache.calcite.util.Static.RESOURCE;

public class PigletParserTokenManager implements PigletParserConstants
{
    List<Integer> lexicalStateStack = Lists.newArrayList();

    void pushState() {
      lexicalStateStack.add(curLexState);
    }

    void popState() {
      SwitchTo(lexicalStateStack.remove(lexicalStateStack.size() - 1));
    }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000200000000000L) != 0L)
            return 71;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 81;
            return 72;
         }
         if ((active0 & 0x1f7fffeL) != 0L)
         {
            jjmatchedKind = 81;
            return 73;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x140L) != 0L)
            return 17;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 74;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 56;
         return -1;
      case 1:
         if ((active0 & 0x300058L) != 0L)
            return 73;
         if ((active0 & 0x1cfffa6L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 73;
         }
         if ((active1 & 0x100L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x1d3ff80L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 73;
         }
         if ((active0 & 0xc002eL) != 0L)
            return 73;
         return -1;
      case 3:
         if ((active0 & 0x410580L) != 0L)
            return 73;
         if ((active0 & 0x192fa00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 3;
            }
            return 73;
         }
         return -1;
      case 4:
         if ((active0 & 0x928800L) != 0L)
            return 73;
         if ((active0 & 0x1007300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
            return 73;
         }
         return -1;
      case 5:
         if ((active0 & 0x1001000L) != 0L)
            return 73;
         if ((active0 & 0x6300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 73;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000L) != 0L)
            return 73;
         if ((active0 & 0x4300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
            return 73;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x80000000000000L, 0x0L);
      case 34:
         return jjStartNfaWithStates_1(0, 63, 74);
      case 39:
         return jjStartNfaWithStates_1(0, 62, 56);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStopAtPos(0, 58);
      case 43:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80L);
      case 46:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_1(0x2000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x140L);
      case 58:
         return jjStopAtPos(0, 52);
      case 59:
         return jjStopAtPos(0, 44);
      case 60:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_1(0x1000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 51);
      case 91:
         return jjStopAtPos(0, 42);
      case 93:
         return jjStopAtPos(0, 43);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1eL, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_1(0x60L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x780L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x3800L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_1(0xc000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_1(0x30000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_1(0x40000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x80000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x300000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0xc00000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 40);
      case 124:
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(1, 72, 15);
         break;
      case 45:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 46:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 47:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x1040820L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x4180L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x21200L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x2L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x4L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x92000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x508000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x8L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x800400L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(1, 6, 73);
         break;
      case 124:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000L);
      case 67:
      case 99:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(2, 3, 73);
         break;
      case 68:
      case 100:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(2, 2, 73);
         return jjMoveStringLiteralDfa3_1(active0, 0x100000L);
      case 71:
      case 103:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(2, 5, 73);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(2, 1, 73);
         return jjMoveStringLiteralDfa3_1(active0, 0x1001800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x20400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L);
      case 80:
      case 112:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(2, 18, 73);
         return jjMoveStringLiteralDfa3_1(active0, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x380L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(2, 19, 73);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x100L);
      case 68:
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 16, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(3, 22, 73);
         return jjMoveStringLiteralDfa4_1(active0, 0x106000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000L);
      case 80:
      case 112:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 73);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x1200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x1008000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(4, 11, 73);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 23, 73);
         return jjMoveStringLiteralDfa5_1(active0, 0x1001000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x200L);
      case 80:
      case 112:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 15, 73);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 73);
         return jjMoveStringLiteralDfa5_1(active0, 0x4100L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(4, 17, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_1(active0, 0x200L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(5, 12, 73);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(5, 24, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_1(active0, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x200L);
      case 72:
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(6, 13, 73);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(7, 8, 73);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(7, 14, 73);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(7, 9, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 73:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(20, 22);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(10, 18);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 74:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(50);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 56:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 39)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if ((0xfc00f7faffffc9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 1:
               case 3:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 4:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 39 && kind > 32)
                     kind = 32;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
               case 11:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(20, 22);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 22:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 34 && kind > 78)
                     kind = 78;
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 36)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(10, 18);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(28, 30);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 9);
                  break;
               case 52:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 53:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 54:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 39 && kind > 33)
                     kind = 33;
                  break;
               case 57:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 59:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 62:
                  if (curChar == 39)
                     jjCheckNAddStates(35, 37);
                  break;
               case 61:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 63:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 65:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(67, 69);
                  break;
               case 67:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 68:
                  if (curChar == 34)
                     jjCheckNAddStates(38, 40);
                  break;
               case 69:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(41, 42);
                  else if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(9);
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 74:
               case 20:
                  jjCheckNAddStates(19, 21);
                  break;
               case 56:
                  jjCheckNAddStates(22, 24);
                  if ((0xffffff81ffffff81L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  jjAddStates(25, 27);
                  break;
               case 6:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  jjAddStates(0, 2);
                  break;
               case 14:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 16:
                  if (kind > 69)
                     kind = 69;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(43, 44);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 52:
                  jjCheckNAddStates(22, 24);
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 61:
                  jjAddStates(35, 37);
                  break;
               case 67:
                  jjAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 74:
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(43, 44);
                  break;
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 37);
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000200000000000L) != 0L)
            return 71;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 81;
            return 72;
         }
         if ((active0 & 0x1f7fffeL) != 0L)
         {
            jjmatchedKind = 81;
            return 73;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x140L) != 0L)
            return 17;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 56;
         if ((active0 & 0x40000000000L) != 0L)
            return 74;
         return -1;
      case 1:
         if ((active0 & 0x300058L) != 0L)
            return 73;
         if ((active0 & 0x1cfffa6L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 73;
         }
         if ((active1 & 0x100L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x1d3ff80L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 73;
         }
         if ((active0 & 0xc002eL) != 0L)
            return 73;
         return -1;
      case 3:
         if ((active0 & 0x410580L) != 0L)
            return 73;
         if ((active0 & 0x192fa00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 3;
            }
            return 73;
         }
         return -1;
      case 4:
         if ((active0 & 0x928800L) != 0L)
            return 73;
         if ((active0 & 0x1007300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
            return 73;
         }
         return -1;
      case 5:
         if ((active0 & 0x1001000L) != 0L)
            return 73;
         if ((active0 & 0x6300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 73;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000L) != 0L)
            return 73;
         if ((active0 & 0x4300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
            return 73;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 63);
      case 39:
         return jjStartNfaWithStates_0(0, 62, 56);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStopAtPos(0, 58);
      case 43:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 46:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x140L);
      case 58:
         return jjStopAtPos(0, 52);
      case 59:
         return jjStopAtPos(0, 44);
      case 60:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 51);
      case 91:
         return jjStartNfaWithStates_0(0, 42, 74);
      case 93:
         return jjStopAtPos(0, 43);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1eL, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x60L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x780L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3800L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 40);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 15);
         break;
      case 45:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 46:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 47:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040820L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4180L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x21200L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x92000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x508000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800400L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 73);
         break;
      case 124:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 67:
      case 99:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 73);
         break;
      case 68:
      case 100:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 2, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 71:
      case 103:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 73);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x1001800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 80:
      case 112:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 73);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x380L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 73);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 68:
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x106000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 80:
      case 112:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 73);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 73);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x1001000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 80:
      case 112:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 73);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0x4100L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 73);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 72:
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 73);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 73);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 73);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 73:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(10, 18);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 74:
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(50);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 56:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 39)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if ((0xfc00f7faffffc9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 1:
               case 3:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 4:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 39 && kind > 32)
                     kind = 32;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
               case 11:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 36)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(10, 18);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(28, 30);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 9);
                  break;
               case 52:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 53:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 54:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 39 && kind > 33)
                     kind = 33;
                  break;
               case 57:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 59:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 62:
                  if (curChar == 39)
                     jjCheckNAddStates(35, 37);
                  break;
               case 61:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 63:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 65:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(67, 69);
                  break;
               case 67:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 68:
                  if (curChar == 34)
                     jjCheckNAddStates(38, 40);
                  break;
               case 69:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(20, 22);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(41, 42);
                  else if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(9);
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 74:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 56:
                  jjCheckNAddStates(22, 24);
                  if ((0xffffff81ffffff81L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  jjAddStates(25, 27);
                  break;
               case 6:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  jjAddStates(0, 2);
                  break;
               case 14:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 16:
                  if (kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(20, 22);
                  break;
               case 20:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 21:
                  if (curChar == 93)
                     jjCheckNAddStates(19, 21);
                  break;
               case 22:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 93 && kind > 77)
                     kind = 77;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(43, 44);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 52:
                  jjCheckNAddStates(22, 24);
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 61:
                  jjAddStates(35, 37);
                  break;
               case 67:
                  jjAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 74:
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(43, 44);
                  break;
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 37);
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 73)
                     kind = 73;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000200000000000L) != 0L)
            return 71;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 81;
            return 72;
         }
         if ((active0 & 0x1f7fffeL) != 0L)
         {
            jjmatchedKind = 81;
            return 73;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x140L) != 0L)
            return 17;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 56;
         return -1;
      case 1:
         if ((active0 & 0x300058L) != 0L)
            return 73;
         if ((active0 & 0x1cfffa6L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 73;
         }
         if ((active1 & 0x100L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x1d3ff80L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 73;
         }
         if ((active0 & 0xc002eL) != 0L)
            return 73;
         return -1;
      case 3:
         if ((active0 & 0x410580L) != 0L)
            return 73;
         if ((active0 & 0x192fa00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 3;
            }
            return 73;
         }
         return -1;
      case 4:
         if ((active0 & 0x928800L) != 0L)
            return 73;
         if ((active0 & 0x1007300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
            return 73;
         }
         return -1;
      case 5:
         if ((active0 & 0x1001000L) != 0L)
            return 73;
         if ((active0 & 0x6300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 73;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000L) != 0L)
            return 73;
         if ((active0 & 0x4300L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
            return 73;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 63);
      case 39:
         return jjStartNfaWithStates_2(0, 62, 56);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStopAtPos(0, 58);
      case 43:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80L);
      case 46:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_2(0x2000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x140L);
      case 58:
         return jjStopAtPos(0, 52);
      case 59:
         return jjStopAtPos(0, 44);
      case 60:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_2(0x20000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_2(0x1000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_2(0x40000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 51);
      case 91:
         return jjStopAtPos(0, 42);
      case 93:
         return jjStopAtPos(0, 43);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_2(0x1eL, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_2(0x60L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_2(0x780L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_2(0x3800L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_2(0xc000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_2(0x30000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_2(0x40000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_2(0x80000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_2(0x300000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_2(0xc00000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_2(0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 40);
      case 124:
         return jjMoveStringLiteralDfa1_2(0x1000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(1, 72, 15);
         break;
      case 45:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 46:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 47:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x1040820L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x4180L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x21200L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x2L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x4L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x92000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x508000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x8L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x800400L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(1, 6, 73);
         break;
      case 124:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000L);
      case 67:
      case 99:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(2, 3, 73);
         break;
      case 68:
      case 100:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(2, 2, 73);
         return jjMoveStringLiteralDfa3_2(active0, 0x100000L);
      case 71:
      case 103:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(2, 5, 73);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(2, 1, 73);
         return jjMoveStringLiteralDfa3_2(active0, 0x1001800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0x20400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000L);
      case 80:
      case 112:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(2, 18, 73);
         return jjMoveStringLiteralDfa3_2(active0, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x380L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(2, 19, 73);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x100L);
      case 68:
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 73);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 22, 73);
         return jjMoveStringLiteralDfa4_2(active0, 0x106000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x800000L);
      case 80:
      case 112:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(3, 10, 73);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x1200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x1008000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(4, 11, 73);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(4, 23, 73);
         return jjMoveStringLiteralDfa5_2(active0, 0x1001000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x200L);
      case 80:
      case 112:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(4, 15, 73);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 73);
         return jjMoveStringLiteralDfa5_2(active0, 0x4100L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(4, 17, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_2(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_2(active0, 0x200L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(5, 12, 73);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(5, 24, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_2(active0, 0x100L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x200L);
      case 72:
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(6, 13, 73);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_2(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(7, 8, 73);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(7, 14, 73);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(7, 9, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, 0L);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 73:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(10, 18);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(50);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 56:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 39)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if ((0xfc00f7faffffc9ffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 1:
               case 3:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 4:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 39 && kind > 32)
                     kind = 32;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
               case 11:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(19, 21);
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x7ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 36)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 36)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(10, 18);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 39);
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(28, 30);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 39);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 9);
                  break;
               case 52:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 53:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 54:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 39 && kind > 33)
                     kind = 33;
                  break;
               case 57:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 59:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 62:
                  if (curChar == 39)
                     jjCheckNAddStates(35, 37);
                  break;
               case 61:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 63:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 65:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(67, 69);
                  break;
               case 67:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 68:
                  if (curChar == 34)
                     jjCheckNAddStates(38, 40);
                  break;
               case 69:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(20, 22);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(41, 42);
                  else if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(9);
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 56:
                  jjCheckNAddStates(22, 24);
                  if ((0xffffff81ffffff81L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  jjAddStates(25, 27);
                  break;
               case 6:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  jjAddStates(0, 2);
                  break;
               case 14:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 16:
                  if (kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(20, 22);
                  break;
               case 20:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 21:
                  if (curChar == 96)
                     jjCheckNAddStates(19, 21);
                  break;
               case 22:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 96 && kind > 79)
                     kind = 79;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(43, 44);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 52:
                  jjCheckNAddStates(22, 24);
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 61:
                  jjAddStates(35, 37);
                  break;
               case 67:
                  jjAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(31);
                  }
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 21);
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(43, 44);
                  break;
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(31);
                  break;
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 37);
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   10, 12, 13, 24, 25, 26, 52, 54, 55, 56, 33, 34, 35, 38, 42, 39, 
   44, 46, 47, 20, 22, 23, 52, 54, 55, 2, 4, 5, 44, 45, 46, 42, 
   43, 39, 47, 61, 63, 64, 67, 69, 70, 59, 65, 27, 28, 40, 41, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\173", "\175", "\133", "\135", "\73", "\56", "\54", "\75", "\75\75", "\76", "\74", 
"\77", "\72", "\74\75", "\76\75", "\41\75", "\53", "\55", "\52", "\57", "\174\174", 
"\56\56", "\47", "\42", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "DQID", 
   "BTID", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 3, 5, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffef1fffffffL, 0x7e000L, 
};
static final long[] jjtoSkip = {
   0x0L, 0xe1fL, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xe00L, 
};
static final long[] jjtoMore = {
   0x0L, 0x11e0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[71];
private final int[] jjstateSet = new int[142];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public PigletParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PigletParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 71; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 76)
         {
            jjmatchedKind = 76;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 76)
         {
            jjmatchedKind = 76;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 76)
         {
            jjmatchedKind = 76;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 73 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   popState();
         break;
      case 74 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              popState();
         break;
      case 75 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  popState();
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 69 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                     pushState();
         break;
      case 70 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           pushState();
         break;
      case 71 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           pushState();
         break;
      case 72 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
           pushState();
         break;
      default : 
         break;
   }
}
}
